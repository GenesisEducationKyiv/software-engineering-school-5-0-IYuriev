version: '3.8'

volumes:
  postgres-db-test:
  redis-data-test:
  subscription-data-test:
  weather-data-test:
  email-data-test:
  gateway-data:

services:
  db-test:
    image: postgres:17-alpine
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-db-test:/var/lib/postgresql/data
    ports:
      - 5434:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis-test:
    image: redis:7-alpine
    restart: always
    ports:
      - 6381:6379
    volumes:
      - redis-data-test:/data

  email-test:
    build:
      context: .
      dockerfile: apps/email/Dockerfile.test
    env_file:
      - .env.test
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    command: npm run test:email

  gateway-integration-test:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile.test
    env_file:
      - apps/gateway/.env.test
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
      weather:
        condition: service_started
      subscription:
        condition: service_started
    command: npm run test:integration

  gateway-architecture-test:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile.test
    env_file:
      - .env.test
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    command: npm run test:architecture

  notification-test:
    build:
      context: .
      dockerfile: apps/notification/Dockerfile.test
    env_file:
      - .env.test
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    command: npm run test:notification

  subscription-test:
    build:
      context: .
      dockerfile: apps/subscription/Dockerfile.test
    env_file:
      - .env.test
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    command: npm run test:subscription

  weather-test:
    build:
      context: .
      dockerfile: apps/weather/Dockerfile.test
    env_file:
      - .env.test
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    command: npm run test:weather

  weather:
    container_name: weather
    build:
      context: .
      dockerfile: apps/weather/Dockerfile
    env_file:
      - apps/weather/.env.test
    ports:
      - 4001:4001
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    volumes:
      - .:/app
      - weather-data-test:/app/node_modules

  subscription:
    container_name: subscription
    build:
      context: .
      dockerfile: apps/subscription/Dockerfile
    env_file:
      - apps/subscription/.env.test
    ports:
      - 4002:4002
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
      email:
        condition: service_started
    volumes:
      - .:/app
      - subscription-data-test:/app/node_modules

  email:
    container_name: email
    build:
      context: .
      dockerfile: apps/email/Dockerfile
    env_file:
      - apps/email/.env.test
    ports:
      - 4000:4000
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    volumes:
      - .:/app
      - email-data-test:/app/node_modules
