/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: subscription.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */

/*eslint-disable */
export interface SubscribeRequest {
  email: string;
  city: string;
  frequency: Frequency;
}

export enum Frequency {
  HOURLY = 0,
  DAILY = 1,
}

export interface SuccessResponse {
  success: boolean;
}

export interface TokenRequest {
  token: string;
}

export interface GetConfirmedSubscriptionsRequest {
  frequency: Frequency;
}

export interface GetConfirmedSubscriptionsResponse {
  subscriptions: SubscriptionEntity[];
}

interface SubscriptionEntity {
  id: number;
  email: string;
  city: string;
  frequency: Frequency;
  confirmed: boolean;
  tokens: TokenEntity[];
  createdAt: string;
  updatedAt: string;
}

interface TokenEntity {
  id: number;
  token: string;
  subscriptionId: number;
  createdAt: string;
}

import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace subscription {
  export enum Frequency {
    hourly = 0,
    daily = 1,
  }
  export class SubscribeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            email?: string;
            city?: string;
            frequency?: Frequency;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('email' in data && data.email != undefined) {
          this.email = data.email;
        }
        if ('city' in data && data.city != undefined) {
          this.city = data.city;
        }
        if ('frequency' in data && data.frequency != undefined) {
          this.frequency = data.frequency;
        }
      }
    }
    get email() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set email(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get city() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set city(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get frequency() {
      return pb_1.Message.getFieldWithDefault(
        this,
        3,
        Frequency.hourly,
      ) as Frequency;
    }
    set frequency(value: Frequency) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      email?: string;
      city?: string;
      frequency?: Frequency;
    }): SubscribeRequest {
      const message = new SubscribeRequest({});
      if (data.email != null) {
        message.email = data.email;
      }
      if (data.city != null) {
        message.city = data.city;
      }
      if (data.frequency != null) {
        message.frequency = data.frequency;
      }
      return message;
    }
    toObject() {
      const data: {
        email?: string;
        city?: string;
        frequency?: Frequency;
      } = {};
      if (this.email != null) {
        data.email = this.email;
      }
      if (this.city != null) {
        data.city = this.city;
      }
      if (this.frequency != null) {
        data.frequency = this.frequency;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.email.length) writer.writeString(1, this.email);
      if (this.city.length) writer.writeString(2, this.city);
      if (this.frequency != Frequency.hourly)
        writer.writeEnum(3, this.frequency);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SubscribeRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SubscribeRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.email = reader.readString();
            break;
          case 2:
            message.city = reader.readString();
            break;
          case 3:
            message.frequency = reader.readEnum();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubscribeRequest {
      return SubscribeRequest.deserialize(bytes);
    }
  }
  export class SuccessResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            success?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('success' in data && data.success != undefined) {
          this.success = data.success;
        }
      }
    }
    get success() {
      return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { success?: boolean }): SuccessResponse {
      const message = new SuccessResponse({});
      if (data.success != null) {
        message.success = data.success;
      }
      return message;
    }
    toObject() {
      const data: {
        success?: boolean;
      } = {};
      if (this.success != null) {
        data.success = this.success;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.success != false) writer.writeBool(1, this.success);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SuccessResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SuccessResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.success = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SuccessResponse {
      return SuccessResponse.deserialize(bytes);
    }
  }
  export class TokenRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('token' in data && data.token != undefined) {
          this.token = data.token;
        }
      }
    }
    get token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { token?: string }): TokenRequest {
      const message = new TokenRequest({});
      if (data.token != null) {
        message.token = data.token;
      }
      return message;
    }
    toObject() {
      const data: {
        token?: string;
      } = {};
      if (this.token != null) {
        data.token = this.token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.token.length) writer.writeString(1, this.token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TokenRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TokenRequest {
      return TokenRequest.deserialize(bytes);
    }
  }
  export class GetConfirmedSubscriptionsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            frequency?: Frequency;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('frequency' in data && data.frequency != undefined) {
          this.frequency = data.frequency;
        }
      }
    }
    get frequency() {
      return pb_1.Message.getFieldWithDefault(
        this,
        1,
        Frequency.hourly,
      ) as Frequency;
    }
    set frequency(value: Frequency) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      frequency?: Frequency;
    }): GetConfirmedSubscriptionsRequest {
      const message = new GetConfirmedSubscriptionsRequest({});
      if (data.frequency != null) {
        message.frequency = data.frequency;
      }
      return message;
    }
    toObject() {
      const data: {
        frequency?: Frequency;
      } = {};
      if (this.frequency != null) {
        data.frequency = this.frequency;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.frequency != Frequency.hourly)
        writer.writeEnum(1, this.frequency);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetConfirmedSubscriptionsRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetConfirmedSubscriptionsRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.frequency = reader.readEnum();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): GetConfirmedSubscriptionsRequest {
      return GetConfirmedSubscriptionsRequest.deserialize(bytes);
    }
  }
  export class SubscriptionEntity extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: number;
            email?: string;
            city?: string;
            frequency?: Frequency;
            confirmed?: boolean;
            tokens?: TokenEntity[];
            createdAt?: string;
            updatedAt?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [6],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('email' in data && data.email != undefined) {
          this.email = data.email;
        }
        if ('city' in data && data.city != undefined) {
          this.city = data.city;
        }
        if ('frequency' in data && data.frequency != undefined) {
          this.frequency = data.frequency;
        }
        if ('confirmed' in data && data.confirmed != undefined) {
          this.confirmed = data.confirmed;
        }
        if ('tokens' in data && data.tokens != undefined) {
          this.tokens = data.tokens;
        }
        if ('createdAt' in data && data.createdAt != undefined) {
          this.createdAt = data.createdAt;
        }
        if ('updatedAt' in data && data.updatedAt != undefined) {
          this.updatedAt = data.updatedAt;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get email() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set email(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get city() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set city(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    get frequency() {
      return pb_1.Message.getFieldWithDefault(
        this,
        4,
        Frequency.hourly,
      ) as Frequency;
    }
    set frequency(value: Frequency) {
      pb_1.Message.setField(this, 4, value);
    }
    get confirmed() {
      return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set confirmed(value: boolean) {
      pb_1.Message.setField(this, 5, value);
    }
    get tokens() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        TokenEntity,
        6,
      ) as TokenEntity[];
    }
    set tokens(value: TokenEntity[]) {
      pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get createdAt() {
      return pb_1.Message.getFieldWithDefault(this, 7, '') as string;
    }
    set createdAt(value: string) {
      pb_1.Message.setField(this, 7, value);
    }
    get updatedAt() {
      return pb_1.Message.getFieldWithDefault(this, 8, '') as string;
    }
    set updatedAt(value: string) {
      pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
      id?: number;
      email?: string;
      city?: string;
      frequency?: Frequency;
      confirmed?: boolean;
      tokens?: ReturnType<typeof TokenEntity.prototype.toObject>[];
      createdAt?: string;
      updatedAt?: string;
    }): SubscriptionEntity {
      const message = new SubscriptionEntity({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.email != null) {
        message.email = data.email;
      }
      if (data.city != null) {
        message.city = data.city;
      }
      if (data.frequency != null) {
        message.frequency = data.frequency;
      }
      if (data.confirmed != null) {
        message.confirmed = data.confirmed;
      }
      if (data.tokens != null) {
        message.tokens = data.tokens.map((item) =>
          TokenEntity.fromObject(item),
        );
      }
      if (data.createdAt != null) {
        message.createdAt = data.createdAt;
      }
      if (data.updatedAt != null) {
        message.updatedAt = data.updatedAt;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: number;
        email?: string;
        city?: string;
        frequency?: Frequency;
        confirmed?: boolean;
        tokens?: ReturnType<typeof TokenEntity.prototype.toObject>[];
        createdAt?: string;
        updatedAt?: string;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.email != null) {
        data.email = this.email;
      }
      if (this.city != null) {
        data.city = this.city;
      }
      if (this.frequency != null) {
        data.frequency = this.frequency;
      }
      if (this.confirmed != null) {
        data.confirmed = this.confirmed;
      }
      if (this.tokens != null) {
        data.tokens = this.tokens.map((item: TokenEntity) => item.toObject());
      }
      if (this.createdAt != null) {
        data.createdAt = this.createdAt;
      }
      if (this.updatedAt != null) {
        data.updatedAt = this.updatedAt;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id != 0) writer.writeInt32(1, this.id);
      if (this.email.length) writer.writeString(2, this.email);
      if (this.city.length) writer.writeString(3, this.city);
      if (this.frequency != Frequency.hourly)
        writer.writeEnum(4, this.frequency);
      if (this.confirmed != false) writer.writeBool(5, this.confirmed);
      if (this.tokens.length)
        writer.writeRepeatedMessage(6, this.tokens, (item: TokenEntity) =>
          item.serialize(writer),
        );
      if (this.createdAt.length) writer.writeString(7, this.createdAt);
      if (this.updatedAt.length) writer.writeString(8, this.updatedAt);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SubscriptionEntity {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SubscriptionEntity();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readInt32();
            break;
          case 2:
            message.email = reader.readString();
            break;
          case 3:
            message.city = reader.readString();
            break;
          case 4:
            message.frequency = reader.readEnum();
            break;
          case 5:
            message.confirmed = reader.readBool();
            break;
          case 6:
            reader.readMessage(message.tokens, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                6,
                TokenEntity.deserialize(reader),
                TokenEntity,
              ),
            );
            break;
          case 7:
            message.createdAt = reader.readString();
            break;
          case 8:
            message.updatedAt = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubscriptionEntity {
      return SubscriptionEntity.deserialize(bytes);
    }
  }
  export class TokenEntity extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: number;
            token?: string;
            subscriptionId?: number;
            createdAt?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('token' in data && data.token != undefined) {
          this.token = data.token;
        }
        if ('subscriptionId' in data && data.subscriptionId != undefined) {
          this.subscriptionId = data.subscriptionId;
        }
        if ('createdAt' in data && data.createdAt != undefined) {
          this.createdAt = data.createdAt;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get subscriptionId() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set subscriptionId(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get createdAt() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set createdAt(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
      id?: number;
      token?: string;
      subscriptionId?: number;
      createdAt?: string;
    }): TokenEntity {
      const message = new TokenEntity({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.token != null) {
        message.token = data.token;
      }
      if (data.subscriptionId != null) {
        message.subscriptionId = data.subscriptionId;
      }
      if (data.createdAt != null) {
        message.createdAt = data.createdAt;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: number;
        token?: string;
        subscriptionId?: number;
        createdAt?: string;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.token != null) {
        data.token = this.token;
      }
      if (this.subscriptionId != null) {
        data.subscriptionId = this.subscriptionId;
      }
      if (this.createdAt != null) {
        data.createdAt = this.createdAt;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id != 0) writer.writeInt32(1, this.id);
      if (this.token.length) writer.writeString(2, this.token);
      if (this.subscriptionId != 0) writer.writeInt32(3, this.subscriptionId);
      if (this.createdAt.length) writer.writeString(4, this.createdAt);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenEntity {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TokenEntity();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readInt32();
            break;
          case 2:
            message.token = reader.readString();
            break;
          case 3:
            message.subscriptionId = reader.readInt32();
            break;
          case 4:
            message.createdAt = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TokenEntity {
      return TokenEntity.deserialize(bytes);
    }
  }
  export class GetConfirmedSubscriptionsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            subscriptions?: SubscriptionEntity[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('subscriptions' in data && data.subscriptions != undefined) {
          this.subscriptions = data.subscriptions;
        }
      }
    }
    get subscriptions() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        SubscriptionEntity,
        1,
      ) as SubscriptionEntity[];
    }
    set subscriptions(value: SubscriptionEntity[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      subscriptions?: ReturnType<
        typeof SubscriptionEntity.prototype.toObject
      >[];
    }): GetConfirmedSubscriptionsResponse {
      const message = new GetConfirmedSubscriptionsResponse({});
      if (data.subscriptions != null) {
        message.subscriptions = data.subscriptions.map((item) =>
          SubscriptionEntity.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        subscriptions?: ReturnType<
          typeof SubscriptionEntity.prototype.toObject
        >[];
      } = {};
      if (this.subscriptions != null) {
        data.subscriptions = this.subscriptions.map(
          (item: SubscriptionEntity) => item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.subscriptions.length)
        writer.writeRepeatedMessage(
          1,
          this.subscriptions,
          (item: SubscriptionEntity) => item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetConfirmedSubscriptionsResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetConfirmedSubscriptionsResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.subscriptions, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                SubscriptionEntity.deserialize(reader),
                SubscriptionEntity,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): GetConfirmedSubscriptionsResponse {
      return GetConfirmedSubscriptionsResponse.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedSubscriptionServiceService {
    static definition = {
      Subscribe: {
        path: '/subscription.SubscriptionService/Subscribe',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SubscribeRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SubscribeRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SuccessResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SuccessResponse.deserialize(new Uint8Array(bytes)),
      },
      Confirm: {
        path: '/subscription.SubscriptionService/Confirm',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: TokenRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          TokenRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SuccessResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SuccessResponse.deserialize(new Uint8Array(bytes)),
      },
      Unsubscribe: {
        path: '/subscription.SubscriptionService/Unsubscribe',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: TokenRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          TokenRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SuccessResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SuccessResponse.deserialize(new Uint8Array(bytes)),
      },
      GetConfirmedSubscriptions: {
        path: '/subscription.SubscriptionService/GetConfirmedSubscriptions',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: GetConfirmedSubscriptionsRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          GetConfirmedSubscriptionsRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: GetConfirmedSubscriptionsResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          GetConfirmedSubscriptionsResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Subscribe(
      call: grpc_1.ServerUnaryCall<SubscribeRequest, SuccessResponse>,
      callback: grpc_1.sendUnaryData<SuccessResponse>,
    ): void;
    abstract Confirm(
      call: grpc_1.ServerUnaryCall<TokenRequest, SuccessResponse>,
      callback: grpc_1.sendUnaryData<SuccessResponse>,
    ): void;
    abstract Unsubscribe(
      call: grpc_1.ServerUnaryCall<TokenRequest, SuccessResponse>,
      callback: grpc_1.sendUnaryData<SuccessResponse>,
    ): void;
    abstract GetConfirmedSubscriptions(
      call: grpc_1.ServerUnaryCall<
        GetConfirmedSubscriptionsRequest,
        GetConfirmedSubscriptionsResponse
      >,
      callback: grpc_1.sendUnaryData<GetConfirmedSubscriptionsResponse>,
    ): void;
  }
  export class SubscriptionServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedSubscriptionServiceService.definition,
    'SubscriptionService',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Subscribe: GrpcUnaryServiceInterface<SubscribeRequest, SuccessResponse> = (
      message: SubscribeRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SuccessResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SuccessResponse>,
      callback?: grpc_1.requestCallback<SuccessResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Subscribe(message, metadata, options, callback);
    };
    Confirm: GrpcUnaryServiceInterface<TokenRequest, SuccessResponse> = (
      message: TokenRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SuccessResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SuccessResponse>,
      callback?: grpc_1.requestCallback<SuccessResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Confirm(message, metadata, options, callback);
    };
    Unsubscribe: GrpcUnaryServiceInterface<TokenRequest, SuccessResponse> = (
      message: TokenRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SuccessResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SuccessResponse>,
      callback?: grpc_1.requestCallback<SuccessResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Unsubscribe(message, metadata, options, callback);
    };
    GetConfirmedSubscriptions: GrpcUnaryServiceInterface<
      GetConfirmedSubscriptionsRequest,
      GetConfirmedSubscriptionsResponse
    > = (
      message: GetConfirmedSubscriptionsRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetConfirmedSubscriptionsResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetConfirmedSubscriptionsResponse>,
      callback?: grpc_1.requestCallback<GetConfirmedSubscriptionsResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.GetConfirmedSubscriptions(
        message,
        metadata,
        options,
        callback,
      );
    };
  }
}
