/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: weather.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */

/*eslint-disable */
export interface CityRequest {
  city: string;
}

export interface GetWeatherResponse {
  temperature: number;
  humidity: number;
  description: string;
}

export interface ValidateCityResponse {
  city: string;
}

import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace weather {
  export class GetWeatherResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            temperature?: number;
            humidity?: number;
            description?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('temperature' in data && data.temperature != undefined) {
          this.temperature = data.temperature;
        }
        if ('humidity' in data && data.humidity != undefined) {
          this.humidity = data.humidity;
        }
        if ('description' in data && data.description != undefined) {
          this.description = data.description;
        }
      }
    }
    get temperature() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set temperature(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get humidity() {
      return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set humidity(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get description() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set description(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      temperature?: number;
      humidity?: number;
      description?: string;
    }): GetWeatherResponse {
      const message = new GetWeatherResponse({});
      if (data.temperature != null) {
        message.temperature = data.temperature;
      }
      if (data.humidity != null) {
        message.humidity = data.humidity;
      }
      if (data.description != null) {
        message.description = data.description;
      }
      return message;
    }
    toObject() {
      const data: {
        temperature?: number;
        humidity?: number;
        description?: string;
      } = {};
      if (this.temperature != null) {
        data.temperature = this.temperature;
      }
      if (this.humidity != null) {
        data.humidity = this.humidity;
      }
      if (this.description != null) {
        data.description = this.description;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.temperature != 0) writer.writeDouble(1, this.temperature);
      if (this.humidity != 0) writer.writeDouble(2, this.humidity);
      if (this.description.length) writer.writeString(3, this.description);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetWeatherResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetWeatherResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.temperature = reader.readDouble();
            break;
          case 2:
            message.humidity = reader.readDouble();
            break;
          case 3:
            message.description = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetWeatherResponse {
      return GetWeatherResponse.deserialize(bytes);
    }
  }
  export class CityRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            city?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('city' in data && data.city != undefined) {
          this.city = data.city;
        }
      }
    }
    get city() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set city(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { city?: string }): CityRequest {
      const message = new CityRequest({});
      if (data.city != null) {
        message.city = data.city;
      }
      return message;
    }
    toObject() {
      const data: {
        city?: string;
      } = {};
      if (this.city != null) {
        data.city = this.city;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.city.length) writer.writeString(1, this.city);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CityRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new CityRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.city = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CityRequest {
      return CityRequest.deserialize(bytes);
    }
  }
  export class ValidateCityResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            city?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('city' in data && data.city != undefined) {
          this.city = data.city;
        }
      }
    }
    get city() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set city(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { city?: string }): ValidateCityResponse {
      const message = new ValidateCityResponse({});
      if (data.city != null) {
        message.city = data.city;
      }
      return message;
    }
    toObject() {
      const data: {
        city?: string;
      } = {};
      if (this.city != null) {
        data.city = this.city;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.city.length) writer.writeString(1, this.city);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): ValidateCityResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ValidateCityResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.city = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ValidateCityResponse {
      return ValidateCityResponse.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedWeatherServiceService {
    static definition = {
      GetWeather: {
        path: '/weather.WeatherService/GetWeather',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: CityRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          CityRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: GetWeatherResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          GetWeatherResponse.deserialize(new Uint8Array(bytes)),
      },
      ValidateCity: {
        path: '/weather.WeatherService/ValidateCity',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: CityRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          CityRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: ValidateCityResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          ValidateCityResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract GetWeather(
      call: grpc_1.ServerUnaryCall<CityRequest, GetWeatherResponse>,
      callback: grpc_1.sendUnaryData<GetWeatherResponse>,
    ): void;
    abstract ValidateCity(
      call: grpc_1.ServerUnaryCall<CityRequest, ValidateCityResponse>,
      callback: grpc_1.sendUnaryData<ValidateCityResponse>,
    ): void;
  }
  export class WeatherServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedWeatherServiceService.definition,
    'WeatherService',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    GetWeather: GrpcUnaryServiceInterface<CityRequest, GetWeatherResponse> = (
      message: CityRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetWeatherResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<GetWeatherResponse>,
      callback?: grpc_1.requestCallback<GetWeatherResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.GetWeather(message, metadata, options, callback);
    };
    ValidateCity: GrpcUnaryServiceInterface<CityRequest, ValidateCityResponse> =
      (
        message: CityRequest,
        metadata:
          | grpc_1.Metadata
          | grpc_1.CallOptions
          | grpc_1.requestCallback<ValidateCityResponse>,
        options?:
          | grpc_1.CallOptions
          | grpc_1.requestCallback<ValidateCityResponse>,
        callback?: grpc_1.requestCallback<ValidateCityResponse>,
      ): grpc_1.ClientUnaryCall => {
        return super.ValidateCity(message, metadata, options, callback);
      };
  }
}
