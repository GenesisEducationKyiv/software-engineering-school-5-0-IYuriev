/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: email.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */

/*eslint-disable */
export interface SendConfirmationEmailRequest {
  email: string;
  token: string;
}

export interface SendForecastEmailRequest {
  to: string;
  subject: string;
  text: string;
}

export interface SuccessResponse {
  success: boolean;
}

import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace email {
  export class SendConfirmationEmailRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            email?: string;
            token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('email' in data && data.email != undefined) {
          this.email = data.email;
        }
        if ('token' in data && data.token != undefined) {
          this.token = data.token;
        }
      }
    }
    get email() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set email(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      email?: string;
      token?: string;
    }): SendConfirmationEmailRequest {
      const message = new SendConfirmationEmailRequest({});
      if (data.email != null) {
        message.email = data.email;
      }
      if (data.token != null) {
        message.token = data.token;
      }
      return message;
    }
    toObject() {
      const data: {
        email?: string;
        token?: string;
      } = {};
      if (this.email != null) {
        data.email = this.email;
      }
      if (this.token != null) {
        data.token = this.token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.email.length) writer.writeString(1, this.email);
      if (this.token.length) writer.writeString(2, this.token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SendConfirmationEmailRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SendConfirmationEmailRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.email = reader.readString();
            break;
          case 2:
            message.token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendConfirmationEmailRequest {
      return SendConfirmationEmailRequest.deserialize(bytes);
    }
  }
  export class SendForecastEmailRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            to?: string;
            subject?: string;
            text?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('to' in data && data.to != undefined) {
          this.to = data.to;
        }
        if ('subject' in data && data.subject != undefined) {
          this.subject = data.subject;
        }
        if ('text' in data && data.text != undefined) {
          this.text = data.text;
        }
      }
    }
    get to() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set to(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get subject() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set subject(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get text() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set text(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      to?: string;
      subject?: string;
      text?: string;
    }): SendForecastEmailRequest {
      const message = new SendForecastEmailRequest({});
      if (data.to != null) {
        message.to = data.to;
      }
      if (data.subject != null) {
        message.subject = data.subject;
      }
      if (data.text != null) {
        message.text = data.text;
      }
      return message;
    }
    toObject() {
      const data: {
        to?: string;
        subject?: string;
        text?: string;
      } = {};
      if (this.to != null) {
        data.to = this.to;
      }
      if (this.subject != null) {
        data.subject = this.subject;
      }
      if (this.text != null) {
        data.text = this.text;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.to.length) writer.writeString(1, this.to);
      if (this.subject.length) writer.writeString(2, this.subject);
      if (this.text.length) writer.writeString(3, this.text);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SendForecastEmailRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SendForecastEmailRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.to = reader.readString();
            break;
          case 2:
            message.subject = reader.readString();
            break;
          case 3:
            message.text = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendForecastEmailRequest {
      return SendForecastEmailRequest.deserialize(bytes);
    }
  }
  export class SuccesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            success?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('success' in data && data.success != undefined) {
          this.success = data.success;
        }
      }
    }
    get success() {
      return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { success?: boolean }): SuccesResponse {
      const message = new SuccesResponse({});
      if (data.success != null) {
        message.success = data.success;
      }
      return message;
    }
    toObject() {
      const data: {
        success?: boolean;
      } = {};
      if (this.success != null) {
        data.success = this.success;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.success != false) writer.writeBool(1, this.success);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SuccesResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SuccesResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.success = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SuccesResponse {
      return SuccesResponse.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedEmailServiceService {
    static definition = {
      SendConfirmationEmail: {
        path: '/email.EmailService/SendConfirmationEmail',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SendConfirmationEmailRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SendConfirmationEmailRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SuccesResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SuccesResponse.deserialize(new Uint8Array(bytes)),
      },
      SendForecastEmail: {
        path: '/email.EmailService/SendForecastEmail',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SendForecastEmailRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SendForecastEmailRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SuccesResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SuccesResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SendConfirmationEmail(
      call: grpc_1.ServerUnaryCall<
        SendConfirmationEmailRequest,
        SuccesResponse
      >,
      callback: grpc_1.sendUnaryData<SuccesResponse>,
    ): void;
    abstract SendForecastEmail(
      call: grpc_1.ServerUnaryCall<SendForecastEmailRequest, SuccesResponse>,
      callback: grpc_1.sendUnaryData<SuccesResponse>,
    ): void;
  }
  export class EmailServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedEmailServiceService.definition,
    'EmailService',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    SendConfirmationEmail: GrpcUnaryServiceInterface<
      SendConfirmationEmailRequest,
      SuccesResponse
    > = (
      message: SendConfirmationEmailRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SuccesResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SuccesResponse>,
      callback?: grpc_1.requestCallback<SuccesResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.SendConfirmationEmail(message, metadata, options, callback);
    };
    SendForecastEmail: GrpcUnaryServiceInterface<
      SendForecastEmailRequest,
      SuccesResponse
    > = (
      message: SendForecastEmailRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SuccesResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SuccesResponse>,
      callback?: grpc_1.requestCallback<SuccesResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.SendForecastEmail(message, metadata, options, callback);
    };
  }
}
