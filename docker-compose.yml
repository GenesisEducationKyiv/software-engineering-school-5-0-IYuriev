version: '3.8'

volumes:
  postgres-db:
  redis-data:
  email-data:
  weather-data:
  subscription-data:
  notification-data:
  gateway-data:

services:
  db:
    container_name: db
    image: postgres:17-alpine
    restart: always
    shm_size: 128mb
    env_file:
      - apps/subscription/.env.subscription
    volumes:
      - postgres-db:/var/lib/postgresql/data
    ports:
      - 5433:5432
    user: postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d postgres']
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: redis
    image: redis:7-alpine
    restart: always
    ports:
      - 6380:6379
    volumes:
      - redis-data:/data

  email:
    container_name: email
    build:
      context: .
      dockerfile: apps/email/Dockerfile
    env_file:
      - apps/email/.env.email
    ports:
      - 4000:4000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - email-data:/app/node_modules

  weather:
    container_name: weather
    build:
      context: .
      dockerfile: apps/weather/Dockerfile
    env_file:
      - apps/weather/.env.weather
    ports:
      - 4001:4001
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - weather-data:/app/node_modules

  subscription:
    container_name: subscription
    build:
      context: .
      dockerfile: apps/subscription/Dockerfile
    env_file:
      - apps/subscription/.env.subscription
    ports:
      - 4002:4002
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - subscription-data:/app/node_modules

  notification:
    container_name: notification
    build:
      context: .
      dockerfile: apps/notification/Dockerfile
    env_file:
      - apps/notification/.env.notification
    ports:
      - 4003:4003
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - notification-data:/app/node_modules

  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
    env_file:
      - apps/gateway/.env.gateway
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - gateway-data:/app/node_modules
